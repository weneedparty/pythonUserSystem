# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: account_service.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Dict

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase
import grpclib


@dataclass(eq=False, repr=False)
class HelloRequest(betterproto.Message):
    name: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class HelloReply(betterproto.Message):
    message: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class Empty(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class RegisterRequest(betterproto.Message):
    email: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class RegisterReply(betterproto.Message):
    result: str = betterproto.string_field(1)
    error: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class RegisterConfirmRequest(betterproto.Message):
    email: str = betterproto.string_field(1)
    random_string: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class JwtObject(betterproto.Message):
    jwt: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class RegisterConfirmReply(betterproto.Message):
    result: "JwtObject" = betterproto.message_field(1)
    error: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class JwtIsOkRequest(betterproto.Message):
    jwt: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class JwtIsOkReply(betterproto.Message):
    ok: bool = betterproto.bool_field(1)


class AccountServiceStub(betterproto.ServiceStub):
    async def say_hello(self, *, name: str = "") -> "HelloReply":

        request = HelloRequest()
        request.name = name

        return await self._unary_unary(
            "/account_service.AccountService/SayHello", request, HelloReply
        )

    async def user_register_request(self, *, email: str = "") -> "RegisterReply":

        request = RegisterRequest()
        request.email = email

        return await self._unary_unary(
            "/account_service.AccountService/UserRegisterRequest",
            request,
            RegisterReply,
        )

    async def user_register_confirm(
        self, *, email: str = "", random_string: str = ""
    ) -> "RegisterConfirmReply":

        request = RegisterConfirmRequest()
        request.email = email
        request.random_string = random_string

        return await self._unary_unary(
            "/account_service.AccountService/UserRegisterConfirm",
            request,
            RegisterConfirmReply,
        )

    async def jwt_is_ok(self) -> "JwtIsOkReply":

        request = JwtIsOkRequest()

        return await self._unary_unary(
            "/account_service.AccountService/JWTIsOK", request, JwtIsOkReply
        )


class AccountServiceBase(ServiceBase):
    async def say_hello(self, name: str) -> "HelloReply":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def user_register_request(self, email: str) -> "RegisterReply":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def user_register_confirm(
        self, email: str, random_string: str
    ) -> "RegisterConfirmReply":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def jwt_is_ok(self) -> "JwtIsOkReply":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_say_hello(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "name": request.name,
        }

        response = await self.say_hello(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_user_register_request(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "email": request.email,
        }

        response = await self.user_register_request(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_user_register_confirm(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "email": request.email,
            "random_string": request.random_string,
        }

        response = await self.user_register_confirm(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_jwt_is_ok(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {}

        response = await self.jwt_is_ok(**request_kwargs)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/account_service.AccountService/SayHello": grpclib.const.Handler(
                self.__rpc_say_hello,
                grpclib.const.Cardinality.UNARY_UNARY,
                HelloRequest,
                HelloReply,
            ),
            "/account_service.AccountService/UserRegisterRequest": grpclib.const.Handler(
                self.__rpc_user_register_request,
                grpclib.const.Cardinality.UNARY_UNARY,
                RegisterRequest,
                RegisterReply,
            ),
            "/account_service.AccountService/UserRegisterConfirm": grpclib.const.Handler(
                self.__rpc_user_register_confirm,
                grpclib.const.Cardinality.UNARY_UNARY,
                RegisterConfirmRequest,
                RegisterConfirmReply,
            ),
            "/account_service.AccountService/JWTIsOK": grpclib.const.Handler(
                self.__rpc_jwt_is_ok,
                grpclib.const.Cardinality.UNARY_UNARY,
                JwtIsOkRequest,
                JwtIsOkReply,
            ),
        }
